-- File auto generated by purescript-bridge! --
module Command where

import Card (Card)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Boolean, Int, String)
import User (User)

import Prelude
import Data.Generic (class Generic)

data Command =
    CreateRoom String String (Array Card) Boolean
  | DestroyRoom Int
  | RoomDestroyed Int
  | JoinRoom Int
  | LeaveRoom Int
  | RoomJoined Int User
  | RoomLeft Int User
  | Connect String
  | Connected Int
  | Disconnect
  | Disconnected Int
  | CreateNewStory Int String
  | NewStoryCreated Int String
  | VotingComplete (Array Card)
  | Vote Int Card

derive instance genericCommand :: Generic Command


--------------------------------------------------------------------------------
_CreateRoom :: Prism' Command { a :: String, b :: String, c :: Array Card, d :: Boolean }
_CreateRoom = prism' (\{ a, b, c, d } -> CreateRoom a b c d) f
  where
    f (CreateRoom a b c d) = Just $ { a: a, b: b, c: c, d: d }
    f _ = Nothing

_DestroyRoom :: Prism' Command Int
_DestroyRoom = prism' DestroyRoom f
  where
    f (DestroyRoom a) = Just $ a
    f _ = Nothing

_RoomDestroyed :: Prism' Command Int
_RoomDestroyed = prism' RoomDestroyed f
  where
    f (RoomDestroyed a) = Just $ a
    f _ = Nothing

_JoinRoom :: Prism' Command Int
_JoinRoom = prism' JoinRoom f
  where
    f (JoinRoom a) = Just $ a
    f _ = Nothing

_LeaveRoom :: Prism' Command Int
_LeaveRoom = prism' LeaveRoom f
  where
    f (LeaveRoom a) = Just $ a
    f _ = Nothing

_RoomJoined :: Prism' Command { a :: Int, b :: User }
_RoomJoined = prism' (\{ a, b } -> RoomJoined a b) f
  where
    f (RoomJoined a b) = Just $ { a: a, b: b }
    f _ = Nothing

_RoomLeft :: Prism' Command { a :: Int, b :: User }
_RoomLeft = prism' (\{ a, b } -> RoomLeft a b) f
  where
    f (RoomLeft a b) = Just $ { a: a, b: b }
    f _ = Nothing

_Connect :: Prism' Command String
_Connect = prism' Connect f
  where
    f (Connect a) = Just $ a
    f _ = Nothing

_Connected :: Prism' Command Int
_Connected = prism' Connected f
  where
    f (Connected a) = Just $ a
    f _ = Nothing

_Disconnect :: Prism' Command Unit
_Disconnect = prism' (\_ -> Disconnect) f
  where
    f Disconnect = Just unit
    f _ = Nothing

_Disconnected :: Prism' Command Int
_Disconnected = prism' Disconnected f
  where
    f (Disconnected a) = Just $ a
    f _ = Nothing

_CreateNewStory :: Prism' Command { a :: Int, b :: String }
_CreateNewStory = prism' (\{ a, b } -> CreateNewStory a b) f
  where
    f (CreateNewStory a b) = Just $ { a: a, b: b }
    f _ = Nothing

_NewStoryCreated :: Prism' Command { a :: Int, b :: String }
_NewStoryCreated = prism' (\{ a, b } -> NewStoryCreated a b) f
  where
    f (NewStoryCreated a b) = Just $ { a: a, b: b }
    f _ = Nothing

_VotingComplete :: Prism' Command (Array Card)
_VotingComplete = prism' VotingComplete f
  where
    f (VotingComplete a) = Just $ a
    f _ = Nothing

_Vote :: Prism' Command { a :: Int, b :: Card }
_Vote = prism' (\{ a, b } -> Vote a b) f
  where
    f (Vote a b) = Just $ { a: a, b: b }
    f _ = Nothing

--------------------------------------------------------------------------------
