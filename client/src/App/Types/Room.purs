-- File auto generated by purescript-bridge! --
module Room where

import Card (Card)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import Prim (Array, Boolean, Int, String)
import User (User)

import Prelude
import Data.Generic (class Generic)

newtype Room =
    Room {
      _roomId :: Int
    , _roomName :: String
    , _roomOwner :: Int
    , _roomUsers :: Array (Tuple Int (Tuple User (Maybe Card)))
    , _roomResult :: Maybe Card
    , _roomStory :: String
    , _roomDeck :: Array Card
    , _roomPrivate :: Boolean
    }

derive instance genericRoom :: Generic Room

derive instance newtypeRoom :: Newtype Room _


--------------------------------------------------------------------------------
_Room :: Iso' Room { _roomId :: Int, _roomName :: String, _roomOwner :: Int, _roomUsers :: Array (Tuple Int (Tuple User (Maybe Card))), _roomResult :: Maybe Card, _roomStory :: String, _roomDeck :: Array Card, _roomPrivate :: Boolean}
_Room = _Newtype

roomId :: Lens' Room Int
roomId = _Newtype <<< prop (SProxy :: SProxy "_roomId")

roomName :: Lens' Room String
roomName = _Newtype <<< prop (SProxy :: SProxy "_roomName")

roomOwner :: Lens' Room Int
roomOwner = _Newtype <<< prop (SProxy :: SProxy "_roomOwner")

roomUsers :: Lens' Room (Array (Tuple Int (Tuple User (Maybe Card))))
roomUsers = _Newtype <<< prop (SProxy :: SProxy "_roomUsers")

roomResult :: Lens' Room (Maybe Card)
roomResult = _Newtype <<< prop (SProxy :: SProxy "_roomResult")

roomStory :: Lens' Room String
roomStory = _Newtype <<< prop (SProxy :: SProxy "_roomStory")

roomDeck :: Lens' Room (Array Card)
roomDeck = _Newtype <<< prop (SProxy :: SProxy "_roomDeck")

roomPrivate :: Lens' Room Boolean
roomPrivate = _Newtype <<< prop (SProxy :: SProxy "_roomPrivate")

--------------------------------------------------------------------------------
